---
import { useSanityClient } from "@sanity/astro"
import { countryList, citiesQuery, placesQuery } from "../lib/queries"
const props = Astro.props

// get map ID & query for its details
const mapID = props.node.map._ref
const mapQuery = `*[_type == 'map' && _id == '${mapID}']{
  ...,
  ...select(
    customMap == true => {mapAttr},
    {location[]->{name, country->{name}, city->{...}, description, geometry{...}}}
  )
}`
const map = await useSanityClient().fetch(mapQuery)

let countries
let cities
let locations

const layers = map[0].layers
const mapAttr = map[0].mapAttr
//console.log(mapAttr)
const mapZoom = JSON.stringify(map[0].zoomTo)

if (map[0].queryAll == true) {
  const countryQuery = await useSanityClient().fetch(countryList)
  const cityQuery = await useSanityClient().fetch(citiesQuery)
  const placeQuery = await useSanityClient().fetch(placesQuery)

  countries = JSON.stringify(countryQuery)
  cities = JSON.stringify(cityQuery)
  locations = JSON.stringify(placeQuery)
} else {
  locations = JSON.stringify(map[0].location)
}
---
<div class="map-wrapper">
  <nav id="map-toggles" class="map-toggles"></nav>
  <div id={mapID} class="map" data-use data-zoom={mapZoom} data-locations={locations} data-attr={mapAttr} data-layers={layers} data-countries={countries} data-cities={cities}></div>
  <figcaption>{map[0].name}</figcaption>
</div>
<script>
import {orchestrate} from '../lib/maps'

const allMaps = document.querySelectorAll(`[data-use]`)
let countries
let cities
let locations

allMaps.forEach((map) => {
  const mapId = map.getAttribute('id')
  const mapLayers = map.dataset.layers.split(',')
  const mapZoom = map.dataset.zoom

  if (map.dataset.countries) {
    countries = JSON.parse(map.dataset.countries)
  }

  if (map.dataset.cities) {
    cities = JSON.parse(map.dataset.cities)
  }

  if (map.dataset.locations) {
    locations = JSON.parse(map.dataset.locations)
  }
  orchestrate(mapId, mapLayers, mapZoom, countries, cities, locations)
})

</script>